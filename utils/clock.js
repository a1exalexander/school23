import moment from 'moment';

moment.locale('uk');

const lessons = {
  l1: {
    time: '8:30:00',
    msg: '–ü–µ—Ä—à–∏–π —É—Ä–æ–∫'
  },
  l2: {
    time: '9:25:00',
    msg: '–î—Ä—É–≥–∏–π —É—Ä–æ–∫'
  },
  l3: {
    time: '10:30:00',
    msg: '–¢—Ä–µ—Ç—ñ–π —É—Ä–æ–∫'
  },
  l4: {
    time: '11:30:00',
    msg: '–ß–µ—Ç–≤–µ—Ä—Ç–∏–π —É—Ä–æ–∫'
  },
  l5: {
    time: '12:35:00',
    msg: `–ü'—è—Ç–∏–π —É—Ä–æ–∫`
  },
  l6: {
    time: '13:30:00',
    msg: '–®–æ—Å—Ç–∏–π —É—Ä–æ–∫'
  },
  l7: {
    time: '14:25:00',
    msg: '–°—å–æ–º–∏–π —É—Ä–æ–∫'
  },
  l8: {
    time: '15:20:00',
    msg: '–í–æ—Å—å–º–∏–π —É—Ä–æ–∫'
  }
};

const breaks = {
  b1: {
    time: '9:15:00',
    msg: '–ü–µ—Ä–µ—Ä–≤–∞ –ø–µ—Ä–µ–¥ 2-–º —É—Ä–æ–∫–æ–º'
  },
  b2: {
    time: '10:10:00',
    msg: '–ü–µ—Ä–µ—Ä–≤–∞ –ø–µ—Ä–µ–¥ 3-–º —É—Ä–æ–∫–æ–º'
  },
  b3: {
    time: '11:15:00',
    msg: '–ü–µ—Ä–µ—Ä–≤–∞ –ø–µ—Ä–µ–¥ 4-–º —É—Ä–æ–∫–æ–º'
  },
  b4: {
    time: '12:15:00',
    msg: `–ü–µ—Ä–µ—Ä–≤–∞ –ø–µ—Ä–µ–¥ 5-–º —É—Ä–æ–∫–æ–º`
  },
  b5: {
    time: '13:20:00',
    msg: `–ü–µ—Ä–µ—Ä–≤–∞ –ø–µ—Ä–µ–¥ 6-–º —É—Ä–æ–∫–æ–º`
  },
  b6: {
    time: '14:15:00',
    msg: '–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞'
  },
  b7: {
    time: '15:10:00',
    msg: '–ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–æ'
  },
  b8: {
    time: '16:05:00',
    msg: '–ó–∞–≤—Ç—Ä–∞ –æ 08:30 –≤ —à–∫–æ–ª—É'
  }
};

const more = (time) => moment().diff(moment(time, 'H:mm:ss'), 'seconds') >= 0;
const less = (time) => moment().diff(moment(time, 'H:mm:ss'), 'seconds') < 0;
const isTime = (a, b) => more(a) && less(b);

const isWeekday = () => ['—Å–±', '–Ω–¥'].includes(moment().format('dd'));
const nextWeekday = () =>
  ['–ø—Ç'].includes(moment().format('dd')) && !isTime(lessons.l1.time, breaks.b8.time);

const getLesson = (msg) => ({ msg, type: 'lesson' });
const getBreak = (msg) => ({ msg, type: 'break' });

const clock = () => {
  const { l1, l2, l3, l4, l5, l6, l7, l8 } = lessons;
  const { b1, b2, b3, b4, b5, b6, b7, b8 } = breaks;

  switch (true) {
    case isTime(b8.time, '24:00:00') && !nextWeekday() && moment().format('dd') !== '—Å–±':
      return { msg: b8.msg, type: 'after' };
    case isWeekday():
      return { msg: `${moment().format('dddd')}, –Ω–∞—Ä–µ—à—Ç—ñ! üöÄ`, type: 'after' };
    case nextWeekday():
      return { msg: '–ó–∞–≤—Ç—Ä–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π! üî•', type: 'after' };
    case isTime(l1.time, b1.time):
      return getLesson(l1.msg);
    case isTime(b1.time, l2.time):
      return getBreak(b1.msg);
    case isTime(l2.time, b2.time):
      return getLesson(l2.msg);
    case isTime(b2.time, l3.time):
      return getBreak(b2.msg);
    case isTime(l3.time, b3.time):
      return getLesson(l3.msg);
    case isTime(b3.time, l4.time):
      return getBreak(b3.msg);
    case isTime(l4.time, b4.time):
      return getLesson(l4.msg);
    case isTime(b4.time, l5.time):
      return getBreak(b4.msg);
    case isTime(l5.time, b5.time):
      return getLesson(l5.msg);
    case isTime(b5.time, l6.time):
      return getBreak(b5.msg);
    case isTime(l6.time, b6.time):
      return getLesson(l6.msg);
    case isTime(b6.time, l7.time):
      return getBreak(b6.msg);
    case isTime(l7.time, b7.time):
      return getLesson(l7.msg);
    case isTime(b7.time, l8.time):
      return getBreak(b7.msg);
    case isTime(l8.time, b8.time):
      return getLesson(l8.msg);
    default:
      return { msg: `${moment('08:30:00', 'HH:mm:00').calendar()} –≤ —à–∫–æ–ª—É`, type: 'before' };
  }
};

export default clock;
